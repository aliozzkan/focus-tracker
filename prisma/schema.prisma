generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags   Tag[]
  tracks Track[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Tag {
  id    String @id @default(cuid())
  name  String
  icon  String
  color String

  tags        Tag[]   @relation("MasterTag")
  masterTag   Tag?    @relation("MasterTag", fields: [masterTagId], references: [id])
  masterTagId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tracks Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(name)
}

enum TrackType {
  VALUABLE
}

model Track {
  id    String @id @default(cuid())
  title String
  value String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id])

  type TrackType @default(VALUABLE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
